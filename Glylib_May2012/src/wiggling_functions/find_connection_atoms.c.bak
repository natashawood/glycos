#include <glylib.h>
#include <mylib.h>
#include <molecules.h>
int explore_atom_tree(residue *r, atom *a, dihedral_coord_set *DCS, int *lna, atom *pa);
void reverse_DCS_order(dihedral_coord_set *DCS,int lna);

int find_connection_atoms(int linkage, int linked2, atom *cat, atom *bat, dihedral_coord_set *DCS, assembly *A){
// linkage defines the residue id. We want the co_ord of atoms involved in it's reducing linkage to the next residue.

int mi=0,ri=0,ai=0,i=0,j=0,bonds=0,b_ai=0,b_ri=0,b_mi=0,bb_ai=0,ba_ai=0,l_mi=0,l_ri=0,l_ai=0,c_ai=0;
//int l_mi=0,l_ri=0,l_ai=0;i
//char N1,N2; // type of atom
int marker=0;
int lna=0; //linkage number of atoms
int outcome=0;
/*DBG*/printf("linkage=%d, linked2=%d\n",linkage,linked2);

residue *br;
residue *cr;
br=(residue *)calloc(1, sizeof(residue));
cr=(residue *)calloc(1, sizeof(residue));


// Fill in pointers to coords of atoms involved in the reducing linkage of the residue.
for(mi=0;mi<(*A).nm;mi++){ // loop through each molecule
	for (ri=0;ri<(*A).m[mi][0].nr;ri++){ // loop through each residue
		printf("mi=%d,ri=%d,n=%d\n",mi,ri,(*A).m[mi][0].r[ri].n);
		if ((*A).m[mi][0].r[ri].n==linkage){ // if residue is the one we want
			printf("Found linkage,ri=%d\n",ri);
			br=&(*A).m[mi][0].r[ri];
		}
		if ((*A).m[mi][0].r[ri].n==linked2){
			printf("Found linked2,ri=%d\n",ri);
                        cr=&(*A).m[mi][0].r[ri];
                }
	}
}

printf("(*br).nrb=%d\n",(*br).nrb);

for (i=0;i<(*br).nrb;i++){ // loop through each connected atom. should only be one normally.
	b_ai=(*br).rb[i].s.a; 
	c_ai=(*br).rb[i].t.a;
	bat=&(*br).a[b_ai];    
        cat=&(*cr).a[c_ai];
	printf("bat=%s in residue %d\n",bat[0].N,(*br).n);
	printf("cat=%s in residue %d\n",cat[0].N,(*cr).n);
}


// first explore in cat direction
outcome=explore_atom_tree(cr,cat,DCS,&lna,cat);

printf("lna=%d\n",lna);
// reverse order of DCS
reverse_DCS_order(DCS,lna);

// now explore in bat direction
printf("Now for bat\n");
outcome=explore_atom_tree(br,bat,DCS,&lna,bat);

//free(br);
//free(cr);
return lna;
}

int explore_atom_tree(residue *r, atom *a, dihedral_coord_set *DCS, int *lna, atom *pa){
int i=0;
int ai=0; // atom index
int outcome=0;
atom *na;
na=(atom *)calloc(1, sizeof(atom));
printf("Entered explore_atom_tree\n");

for (i=0;i<(*a).nmb;i++){
	ai=(*a).mb[i].t.a;
	na=&(*r).a[ai];
	// If atom in ring, save any connected ring atom
	if ((*a).R=='Y'){
		if (na->R=='Y'){
			(*lna)=((*lna)+1);
                        (*DCS).X[(*lna)]=&(*a).x;
			printf("Dropping out having found %s in resid %d is one before end of path\n",(*a).N,(*a).mb[0].s.r);
			(*lna)=((*lna)+1);
			(*DCS).X[(*lna)]=&(*na).x;
			printf("Dropping out having found %s in resid %d is end of path\n",(*na).N,(*na).mb[0].s.r);
			i=(*a).nmb;// stop looping through connections
			outcome=1;
		}
	}
	else if ((*a).R!='Y'){
		if ( (na->mb[0].s.a!=pa->mb[0].s.a) && (na->mb[0].s.r==pa->mb[0].s.r) ) {// if not previous atom and within same residue
			outcome=explore_atom_tree(r,na,DCS,lna,a);
			if (outcome==1){
				(*lna)=((*lna)+1);
				(*DCS).X[(*lna)]=&(*a).x;
				printf("Dropping out having found %s in resid %d is in path\n",(*a).N,(*a).mb[0].s.r);
				i=(*a).nmb;
			}
		}
	}
	else { printf("Something strange in explore_atom_tree\n");}
}
//free(na);
return outcome;
}

void reverse_DCS_order(dihedral_coord_set *DCS,int lna){
int i;
dihedral_coord_set *tmp;
tmp=(dihedral_coord_set*)calloc(8, sizeof(dihedral_coord_set));
printf("Entered reverse_DCS_order,lna=%d\n",lna);

for (i=1;i<=lna;i++){	
	printf("DCS[0].X[%d]=%1f\n",i,(*(DCS->X[i])).i);
	tmp->X[lna-i]=DCS->X[i];
}
printf("Reordering\n");
for (i=1;i<=lna;i++){
	DCS->X[i]=tmp->X[i-1];
	printf("DCS[0].X[%d]=%1f\n",i,(*(DCS->X[i])).i);
}
return;
}

/*

if((*bat).R=='Y'){
	marker=1;
	for (i=0;i<(*bat).nmb;i++){ // loop through each connected atom 
		if ((*bat).mb[i].s.r==(*bat).mb[i].t.r){ // if in the same residue, assumes all connected residues will have unique id's.
			bb_ai=(*bat).mb[i].t.a; // any connected atom within residue will do to define torsion
			DCS[0].X[1]=&(*br).a[bb_ai].x;
			DCS[0].X[2]=&(*bat).x;
			l_ri=(*bat).mb[i].t.r;
			l_ai=(*bat).mb[i].t.a;
			DCS[0].X[3]=&(*cat).x;
			printf("coord[1]=%s resid=%d\n",(*br).a[bb_ai].N,(*bat).mb[i].t.r);
			printf("coord[2]=%s resid=%d\n",(*bat).N,(*bat).mb[i].t.r);
			printf("coord[3]=%s resid=%d\n",(*cat).N,(*cat).mb[i].t.r);

if((*bat).R=='N'){	
	marker=1; // Know that we have entered this loop.
	for (i=0;i<(*bat).nmb;i++){ // loop through each connected atom
		if ((*bat).mb[i].s.r==(*bat).mb[i].t.r){ // if in the same residue, assumes all connected residues will have unique id's.
			bb_ai=(*bat).mb[i].t.a;
			bbb_ai=(*br).a[bb_ai].mb[0].t.a;
			DCS[0].X[1]=&(*br).a[bbb_ai].x;
			DCS[0].X[2]=&(*br).a[bb_ai].x;
			DCS[0].X[3]=&(*bat).x;
			l_ri=;
                        l_ai=ai;	

								DCS[0].X[1]=&(*A).m[mi][0].r[ri].a[bb_ai].x; 
								DCS[0].X[2]=&(*A).m[mi][0].r[ri].a[ai].x; // This will be C1
								l_mi=b_mi;
								l_ri=b_ri;
                			       		        l_ai=b_ai;
                			       		        DCS[0].X[3]=&(*A).m[b_mi][0].r[b_ri].a[b_ai].x;
/DBG/					 			printf("a\ncoord[1]=%s resid=%d\n",(*A).m[mi][0].r[ri].a[bb_ai].N,(*A).m[mi][0].r[ri].n);
/DBG/								printf("coord[2]=%s resid=%d\n",(*A).m[mi][0].r[ri].a[ai].N,(*A).m[mi][0].r[ri].n);
/DBG/								printf("coord[3]=%s resid=%d\n",(*A).m[b_mi][0].r[b_ri].a[b_ai].N,(*A).m[b_mi][0].r[b_ri].n);
							}			
							else if ( (*A).m[b_mi][0].r[b_ri].a[b_ai].R=='Y') {
								marker=1; // Know that we have entered this loop.
								l_mi=mi;
                                	        	        l_ri=ri;
                                	       		        l_ai=ai;
								bb_ai=(*A).m[b_mi][0].r[b_ri].a[b_ai].b[0].t.a; // any atom connected (will be within resid)
								DCS[0].X[1]=&(*A).m[b_mi][0].r[b_ri].a[bb_ai].x;
								DCS[0].X[2]=&(*A).m[b_mi][0].r[b_ri].a[b_ai].x;	
								DCS[0].X[3]=&(*A).m[mi][0].r[ri].a[ai].x;
								printf("b\ncoord[1]=%s resid=%d\n",(*A).m[b_mi][0].r[b_ri].a[bb_ai].N,(*A).m[b_mi][0].r[b_ri].n);
                                	       			printf("coord[2]=%s resid=%d\n",(*A).m[b_mi][0].r[b_ri].a[b_ai].N,(*A).m[b_mi][0].r[b_ri].n);
                                	       			printf("coord[3]=%s resid=%d\n",(*A).m[mi][0].r[ri].a[ai].N,(*A).m[mi][0].r[ri].n);
								}
							else {printf("\n\n\nMajor Failure in find_linkage_atom_coord\n\n\n");}
						}
					}
				}
			}
		}	
	}
}

if (marker==1){
	bonds=(*A).m[l_mi][0].r[l_ri].a[l_ai].nb;
//DBG/	printf("Number of bonds to linkage atom is %d\n",bonds);
        j=4; 
	ba_ai=-1; // set to impossible index for first loop
	for (i=0;i<(*A).m[l_mi][0].r[l_ri].a[l_ai].nb;i++){ // for each neighbour
		while (bonds<3){ // bonds <3 when not in ring. When hit a ring atom, get next one and then quit.
			ba_ai=(*A).m[l_mi][0].r[l_ri].a[l_ai].b[i].t.a;
			if (l_ai!=ba_ai) { // if not the previous atom (Next atom will be bonded to it too and can go over and back if not careful with this)
				bonds=(*A).m[l_mi][0].r[l_ri].a[l_ai].nb;
	      			DCS[0].X[j]=&(*A).m[l_mi][0].r[l_ri].a[ba_ai].x;
				/ Done elsewhere from now on
				// For longer linkages, add atoms that need to be rotated
				if ((j-3)>=3) {
                                	brnch[*nab]=DCS[0].X[j-3]; // save address of previouscoord
                                	*nab=(*nab+1);
				}
				/
/DBG/				printf("coord[%d]=%s resid=%d\n",j,(*A).m[l_mi][0].r[l_ri].a[ba_ai].N,(*A).m[l_mi][0].r[l_ri].n);
				j++;
				l_ai=ba_ai; // loop onto next one
			}
		}
	}
}
j--;
return j;
}
*/

/*
DCS[1]=Home atom connected to C1
DCS[2]=C1
DCS[3]=Oxygen connected to C1
DCS[4]=Atom connected to oxygen at [3]
DCS[5]=keep moving down until hit a ring saving atoms
*/
