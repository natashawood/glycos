#include <glylib.h> // required for load_pdb function
#include <mylib.h>
#include <molecules.h>

//int main (void){
double wiggler(assembly *A, assembly *B, int *core_ri){

int window_size=5; // fineness of search
int branch[(*A).nr]; // stores which residues are in the branch
branch[0]=0; // stores number of residues in branch
int linkage_resid=0,linked2=0,current_resid=0; // linkage is resid being wiggled. current_resid is one with clash being resolved
double resid_clash=1000; 
double total_clash=1000; 
int struct_total=10000; // id for structures generated so far. loads into vmd in order when starting at 10000
int i=1; // 
int y=0;
int tors=0;// dummy for the first call, set in generate_torsion...

while ( (total_clash>36) && (struct_total<11000) ) {
	resid_clash=1000; //reset after resolved each one
	total_clash=find_vdw_clashes_return_total(A,B,1);
	printf("total_clash=%2f\n",total_clash);
	current_resid=find_vdw_clashes_return_clashiest_resid(A,B,1); // SORT OUT THAT 1! Not doing anything at the minute.
	find_path_to_core(A, core_ri, current_resid, branch);
	i=1;
	printf("Starting wiggling\n");
	while ( (resid_clash>1) && (i<branch[0]) ) {
		linkage_resid=branch[i];
		linked2=branch[i+1];
		printf("will generate torsions\n");
		generate_torsion_window_permutations(window_size,A,B,tors,&struct_total,&resid_clash,current_resid,linked2);
		printf("Finished generating torsions\n");
		i++;
		core_ri[0]=((core_ri[0])+1);
		core_ri[core_ri[0]]=linked2;
		for (y=1;y<core_ri[0];y++){
			printf("core_ri[%d]=%d\n",y,core_ri[y]);
		}
		keep_best_structure(A,B,&total_clash); // otherwise move onto next linkage and see if we can fix it from there.
	}
}
	


//linkage_resid=20;

/*
current_resid=linkage_resid;
while ( (resid_clash>1.0) && (struct_total<12000) ){ // until resid clash is resolved or 2000 iterations have passed
	nab=0; // resets number of atoms in branch
	lna=find_linkage_atom_coord(linkage_resid,DCS,&A,brnch,&nab);
	find_branch_to_rotate(&A, linkage_resid, core_ri, brnch, &nab);
	generate_torsion_window_permutations(window_size,&A,&B,DCS,core_ri,lna,brnch,&nab,tors,&resid_clash,&struct_total,&current_resid);
	linkage_resid=find_next_resid(&A,linkage_resid,core_ri);
	if (linkage_resid==0){
		A=*load_pdb(filename); // reset A
		set_nbonds_for_atoms_in_assembly(&A); // reset A
		set_nmb_for_atoms_in_assembly(&A); // reset A
		linkage_resid=current_resid; // reset to problem resid
		linkage_resid=find_next_resid(&A,linkage_resid,core_ri); // move to the next one down
	}
}
*/
return total_clash;
}
